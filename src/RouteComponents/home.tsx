import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { addTodo, updateTodo, deleteTodo } from '../stateManagement/Todo/todoLists'; // Importing action creators
import { nanoid } from 'nanoid'; // Importing nanoid for generating unique IDs
import { RootState } from '../stateManagement/Store'; // Importing RootState for type inference
interface Todo {
    id: string; // Changed to string to match the ID generated by nanoid
    text: string;
}

const TodoApp: React.FC = () => {
   // if(false) 
   if(!useSelector((state:RootState)=>state.user.name)){
    window.location.href = '/signin'
   }
    const todos = useSelector((state: RootState) => state.todo.todos); // Accessing todos from state
    const [inputValue, setInputValue] = useState<string>(''); // State for input value
    const [editTodoId, setEditTodoId] = useState<string | null>(null); // Changed to string to match Todo ID
    const [editValue, setEditValue] = useState<string>(''); // State for edited value
    const modeBit = useSelector((state: RootState) => state.themeMode); // Accessing theme mode from state
    const dispatch = useDispatch(); // Accessing dispatch function

    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setInputValue(event.target.value); // Updating input value
    };

    const handleAddTodo = () => {
        if (inputValue.trim() !== '') {
            const newTodo: Todo = {
                id: nanoid(), // Generating unique ID
                text: inputValue,
            };
            dispatch(addTodo(newTodo)); // Dispatching addTodo action with new todo
            setInputValue(''); // Clearing input value
        }
    };

    const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {
        if (event.key === 'Enter') {
            handleAddTodo(); // Adding a new todo on pressing Enter
        }
    };

    const handleEdit = (id: string, text: string) => {
        setEditTodoId(id); // Setting the ID of todo being edited
        setEditValue(text); // Setting initial value for editing
    };

    const handleSave = (id: string) => {
        // Implement saving logic if needed
        const newTodo = {
            id: id,
            text: editValue,
        }
        dispatch(updateTodo(newTodo))
        setEditTodoId('')

    };

    const handleDelete = (id: string) => {
        dispatch(deleteTodo(id)); // Dispatching deleteTodo action with todo ID
    };

    return (
        <div className="container mx-auto p-4 max-w-xl min-h-[86.5vh]">
            <h1 className="text-3xl font-bold mb-6 text-center">Todo List</h1>
            <div className="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mb-4 justify-center">
                <input
                    type="text"
                    value={inputValue}
                    onChange={handleInputChange}
                    onKeyPress={handleKeyPress}
                    className={`${modeBit ? "bg-[#1a1f2c]" : "bg-white"} flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-black-500 w-full`}
                    placeholder="Enter a new todo"
                />
                <button
                    onClick={handleAddTodo}
                    className="bg-blue-500 px-4 py-2 rounded-lg hover:bg-blue-600 focus:outline-none"
                >
                    Add Todo
                </button>
            </div>
            <ul className="list-none p-0">
                {todos.map((todo: Todo) => (
                    <li
                        key={todo.id}
                        className={`${modeBit ? "bg-[#5d5d5e] bg-opacity-[0.2]" : "bg-white"} shadow-md rounded-lg mb-2 p-4 flex flex-col sm:flex-row items-center justify-between`}
                    >
                        {editTodoId === todo.id ? (
                            <input
                                type="text"
                                value={editValue}
                                onChange={(e) => setEditValue(e.target.value)}
                                className={`${modeBit ? "bg-[#484a4f] bg-opacity-[0.3]" : "bg-white border"} flex-1 rounded-lg px-3 py-2 focus:outline-none w-full sm:w-auto`}
                            />
                        ) : (
                            <span className="flex-1">{todo.text}</span>
                        )}
                        <div className="flex space-x-2 mt-2 sm:mt-0">
                            {editTodoId === todo.id ? (
                                <button
                                    onClick={() => handleSave(todo.id)}
                                    className="px-2 py-1 rounded-lg hover:bg-[#3a496b] hover:bg-opacity-[0.1] focus:outline-none focus:ring-2 focus:ring-black-500"
                                >
                                    <img src="save.png" className="h-[2rem]" alt="Save" />
                                </button>
                            ) : (
                                <button
                                    onClick={() => handleEdit(todo.id, todo.text)}
                                    className="px-2 py-1 rounded-lg hover:bg-[#3a496b] hover:bg-opacity-[0.1] focus:outline-none focus:ring-2 focus:ring-black-500"
                                >
                                    <img src="edit.png" className="h-[2rem]" alt="Edit" />
                                </button>
                            )}
                            <button
                                onClick={() => handleDelete(todo.id)}
                                className="px-2 py-1 rounded-lg hover:bg-[#3a496b] hover:bg-opacity-[0.1] focus:outline-none focus:ring-2 focus:ring-black-500"
                            >
                                <img src="delete.png" className="h-[2rem]" alt="Delete" />
                            </button>
                        </div>
                    </li>
                ))}
            </ul>
        </div>


    );
};

export default TodoApp;
